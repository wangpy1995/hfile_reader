// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HFile.proto

#include "HFile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_HBase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_HBase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BytesBytesPair;
}  // namespace protobuf_HBase_2eproto
namespace hbase {
namespace pb {
class FileInfoProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileInfoProto>
      _instance;
} _FileInfoProto_default_instance_;
class FileTrailerProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileTrailerProto>
      _instance;
} _FileTrailerProto_default_instance_;
}  // namespace pb
}  // namespace hbase
namespace protobuf_HFile_2eproto {
static void InitDefaultsFileInfoProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FileInfoProto_default_instance_;
    new (ptr) ::hbase::pb::FileInfoProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FileInfoProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FileInfoProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFileInfoProto}, {
      &protobuf_HBase_2eproto::scc_info_BytesBytesPair.base,}};

static void InitDefaultsFileTrailerProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FileTrailerProto_default_instance_;
    new (ptr) ::hbase::pb::FileTrailerProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FileTrailerProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileTrailerProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileTrailerProto}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FileInfoProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileTrailerProto.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileInfoProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileInfoProto, map_entry_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, file_info_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, load_on_open_data_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, uncompressed_data_index_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, total_uncompressed_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, data_index_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, meta_index_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, entry_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, num_data_index_levels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, first_data_block_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, last_data_block_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, comparator_class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, compression_codec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hbase::pb::FileTrailerProto, encryption_key_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  11,
  9,
  10,
  0,
  12,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::hbase::pb::FileInfoProto)},
  { 7, 25, sizeof(::hbase::pb::FileTrailerProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hbase::pb::_FileInfoProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hbase::pb::_FileTrailerProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "HFile.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013HFile.proto\022\010hbase.pb\032\013HBase.proto\"<\n\r"
      "FileInfoProto\022+\n\tmap_entry\030\001 \003(\0132\030.hbase"
      ".pb.BytesBytesPair\"\221\003\n\020FileTrailerProto\022"
      "\030\n\020file_info_offset\030\001 \001(\004\022 \n\030load_on_ope"
      "n_data_offset\030\002 \001(\004\022$\n\034uncompressed_data"
      "_index_size\030\003 \001(\004\022 \n\030total_uncompressed_"
      "bytes\030\004 \001(\004\022\030\n\020data_index_count\030\005 \001(\r\022\030\n"
      "\020meta_index_count\030\006 \001(\r\022\023\n\013entry_count\030\007"
      " \001(\004\022\035\n\025num_data_index_levels\030\010 \001(\r\022\037\n\027f"
      "irst_data_block_offset\030\t \001(\004\022\036\n\026last_dat"
      "a_block_offset\030\n \001(\004\022\035\n\025comparator_class"
      "_name\030\013 \001(\t\022\031\n\021compression_codec\030\014 \001(\r\022\026"
      "\n\016encryption_key\030\r \001(\014BH\n1org.apache.had"
      "oop.hbase.shaded.protobuf.generatedB\013HFi"
      "leProtosH\001\210\001\001\240\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 576);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HFile.proto", &protobuf_RegisterTypes);
  ::protobuf_HBase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_HFile_2eproto
namespace hbase {
namespace pb {

// ===================================================================

void FileInfoProto::InitAsDefaultInstance() {
}
void FileInfoProto::clear_map_entry() {
  map_entry_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileInfoProto::kMapEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileInfoProto::FileInfoProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_HFile_2eproto::scc_info_FileInfoProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FileInfoProto)
}
FileInfoProto::FileInfoProto(const FileInfoProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      map_entry_(from.map_entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FileInfoProto)
}

void FileInfoProto::SharedCtor() {
}

FileInfoProto::~FileInfoProto() {
  // @@protoc_insertion_point(destructor:hbase.pb.FileInfoProto)
  SharedDtor();
}

void FileInfoProto::SharedDtor() {
}

void FileInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FileInfoProto::descriptor() {
  ::protobuf_HFile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HFile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileInfoProto& FileInfoProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_HFile_2eproto::scc_info_FileInfoProto.base);
  return *internal_default_instance();
}


void FileInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FileInfoProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_entry_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FileInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FileInfoProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.BytesBytesPair map_entry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FileInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FileInfoProto)
  return false;
#undef DO_
}

void FileInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FileInfoProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.BytesBytesPair map_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_entry_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->map_entry(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FileInfoProto)
}

::google::protobuf::uint8* FileInfoProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FileInfoProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.BytesBytesPair map_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_entry_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->map_entry(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FileInfoProto)
  return target;
}

size_t FileInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FileInfoProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .hbase.pb.BytesBytesPair map_entry = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->map_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FileInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FileInfoProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileInfoProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FileInfoProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FileInfoProto)
    MergeFrom(*source);
  }
}

void FileInfoProto::MergeFrom(const FileInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FileInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_entry_.MergeFrom(from.map_entry_);
}

void FileInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FileInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfoProto::CopyFrom(const FileInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FileInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfoProto::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->map_entry())) return false;
  return true;
}

void FileInfoProto::Swap(FileInfoProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileInfoProto::InternalSwap(FileInfoProto* other) {
  using std::swap;
  CastToBase(&map_entry_)->InternalSwap(CastToBase(&other->map_entry_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FileInfoProto::GetMetadata() const {
  protobuf_HFile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HFile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileTrailerProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileTrailerProto::kFileInfoOffsetFieldNumber;
const int FileTrailerProto::kLoadOnOpenDataOffsetFieldNumber;
const int FileTrailerProto::kUncompressedDataIndexSizeFieldNumber;
const int FileTrailerProto::kTotalUncompressedBytesFieldNumber;
const int FileTrailerProto::kDataIndexCountFieldNumber;
const int FileTrailerProto::kMetaIndexCountFieldNumber;
const int FileTrailerProto::kEntryCountFieldNumber;
const int FileTrailerProto::kNumDataIndexLevelsFieldNumber;
const int FileTrailerProto::kFirstDataBlockOffsetFieldNumber;
const int FileTrailerProto::kLastDataBlockOffsetFieldNumber;
const int FileTrailerProto::kComparatorClassNameFieldNumber;
const int FileTrailerProto::kCompressionCodecFieldNumber;
const int FileTrailerProto::kEncryptionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileTrailerProto::FileTrailerProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_HFile_2eproto::scc_info_FileTrailerProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FileTrailerProto)
}
FileTrailerProto::FileTrailerProto(const FileTrailerProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comparator_class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_comparator_class_name()) {
    comparator_class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comparator_class_name_);
  }
  encryption_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryption_key()) {
    encryption_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryption_key_);
  }
  ::memcpy(&file_info_offset_, &from.file_info_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&compression_codec_) -
    reinterpret_cast<char*>(&file_info_offset_)) + sizeof(compression_codec_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FileTrailerProto)
}

void FileTrailerProto::SharedCtor() {
  comparator_class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryption_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_info_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compression_codec_) -
      reinterpret_cast<char*>(&file_info_offset_)) + sizeof(compression_codec_));
}

FileTrailerProto::~FileTrailerProto() {
  // @@protoc_insertion_point(destructor:hbase.pb.FileTrailerProto)
  SharedDtor();
}

void FileTrailerProto::SharedDtor() {
  comparator_class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryption_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileTrailerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FileTrailerProto::descriptor() {
  ::protobuf_HFile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HFile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileTrailerProto& FileTrailerProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_HFile_2eproto::scc_info_FileTrailerProto.base);
  return *internal_default_instance();
}


void FileTrailerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FileTrailerProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      comparator_class_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      encryption_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&file_info_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&meta_index_count_) -
        reinterpret_cast<char*>(&file_info_offset_)) + sizeof(meta_index_count_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&entry_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compression_codec_) -
        reinterpret_cast<char*>(&entry_count_)) + sizeof(compression_codec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FileTrailerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FileTrailerProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 file_info_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_file_info_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_info_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 load_on_open_data_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_load_on_open_data_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &load_on_open_data_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 uncompressed_data_index_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_uncompressed_data_index_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uncompressed_data_index_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 total_uncompressed_bytes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_total_uncompressed_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_uncompressed_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_index_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_data_index_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_index_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 meta_index_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_meta_index_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_index_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 entry_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_entry_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entry_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_data_index_levels = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_num_data_index_levels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_data_index_levels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 first_data_block_offset = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_first_data_block_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_data_block_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_data_block_offset = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_last_data_block_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_data_block_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string comparator_class_name = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comparator_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comparator_class_name().data(), static_cast<int>(this->comparator_class_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hbase.pb.FileTrailerProto.comparator_class_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 compression_codec = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_compression_codec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compression_codec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes encryption_key = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryption_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FileTrailerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FileTrailerProto)
  return false;
#undef DO_
}

void FileTrailerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FileTrailerProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 file_info_offset = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->file_info_offset(), output);
  }

  // optional uint64 load_on_open_data_offset = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->load_on_open_data_offset(), output);
  }

  // optional uint64 uncompressed_data_index_size = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uncompressed_data_index_size(), output);
  }

  // optional uint64 total_uncompressed_bytes = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->total_uncompressed_bytes(), output);
  }

  // optional uint32 data_index_count = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->data_index_count(), output);
  }

  // optional uint32 meta_index_count = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->meta_index_count(), output);
  }

  // optional uint64 entry_count = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->entry_count(), output);
  }

  // optional uint32 num_data_index_levels = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_data_index_levels(), output);
  }

  // optional uint64 first_data_block_offset = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->first_data_block_offset(), output);
  }

  // optional uint64 last_data_block_offset = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->last_data_block_offset(), output);
  }

  // optional string comparator_class_name = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comparator_class_name().data(), static_cast<int>(this->comparator_class_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hbase.pb.FileTrailerProto.comparator_class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->comparator_class_name(), output);
  }

  // optional uint32 compression_codec = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->compression_codec(), output);
  }

  // optional bytes encryption_key = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->encryption_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FileTrailerProto)
}

::google::protobuf::uint8* FileTrailerProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FileTrailerProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 file_info_offset = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->file_info_offset(), target);
  }

  // optional uint64 load_on_open_data_offset = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->load_on_open_data_offset(), target);
  }

  // optional uint64 uncompressed_data_index_size = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uncompressed_data_index_size(), target);
  }

  // optional uint64 total_uncompressed_bytes = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->total_uncompressed_bytes(), target);
  }

  // optional uint32 data_index_count = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->data_index_count(), target);
  }

  // optional uint32 meta_index_count = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->meta_index_count(), target);
  }

  // optional uint64 entry_count = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->entry_count(), target);
  }

  // optional uint32 num_data_index_levels = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_data_index_levels(), target);
  }

  // optional uint64 first_data_block_offset = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->first_data_block_offset(), target);
  }

  // optional uint64 last_data_block_offset = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->last_data_block_offset(), target);
  }

  // optional string comparator_class_name = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comparator_class_name().data(), static_cast<int>(this->comparator_class_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hbase.pb.FileTrailerProto.comparator_class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->comparator_class_name(), target);
  }

  // optional uint32 compression_codec = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->compression_codec(), target);
  }

  // optional bytes encryption_key = 13;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->encryption_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FileTrailerProto)
  return target;
}

size_t FileTrailerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FileTrailerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string comparator_class_name = 11;
    if (has_comparator_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comparator_class_name());
    }

    // optional bytes encryption_key = 13;
    if (has_encryption_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encryption_key());
    }

    // optional uint64 file_info_offset = 1;
    if (has_file_info_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_info_offset());
    }

    // optional uint64 load_on_open_data_offset = 2;
    if (has_load_on_open_data_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->load_on_open_data_offset());
    }

    // optional uint64 uncompressed_data_index_size = 3;
    if (has_uncompressed_data_index_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uncompressed_data_index_size());
    }

    // optional uint64 total_uncompressed_bytes = 4;
    if (has_total_uncompressed_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_uncompressed_bytes());
    }

    // optional uint32 data_index_count = 5;
    if (has_data_index_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_index_count());
    }

    // optional uint32 meta_index_count = 6;
    if (has_meta_index_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_index_count());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint64 entry_count = 7;
    if (has_entry_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entry_count());
    }

    // optional uint64 first_data_block_offset = 9;
    if (has_first_data_block_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first_data_block_offset());
    }

    // optional uint64 last_data_block_offset = 10;
    if (has_last_data_block_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_data_block_offset());
    }

    // optional uint32 num_data_index_levels = 8;
    if (has_num_data_index_levels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_data_index_levels());
    }

    // optional uint32 compression_codec = 12;
    if (has_compression_codec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compression_codec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTrailerProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FileTrailerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTrailerProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileTrailerProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FileTrailerProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FileTrailerProto)
    MergeFrom(*source);
  }
}

void FileTrailerProto::MergeFrom(const FileTrailerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FileTrailerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_comparator_class_name();
      comparator_class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comparator_class_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_encryption_key();
      encryption_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryption_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      file_info_offset_ = from.file_info_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      load_on_open_data_offset_ = from.load_on_open_data_offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      uncompressed_data_index_size_ = from.uncompressed_data_index_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      total_uncompressed_bytes_ = from.total_uncompressed_bytes_;
    }
    if (cached_has_bits & 0x00000040u) {
      data_index_count_ = from.data_index_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      meta_index_count_ = from.meta_index_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      entry_count_ = from.entry_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      first_data_block_offset_ = from.first_data_block_offset_;
    }
    if (cached_has_bits & 0x00000400u) {
      last_data_block_offset_ = from.last_data_block_offset_;
    }
    if (cached_has_bits & 0x00000800u) {
      num_data_index_levels_ = from.num_data_index_levels_;
    }
    if (cached_has_bits & 0x00001000u) {
      compression_codec_ = from.compression_codec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FileTrailerProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FileTrailerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTrailerProto::CopyFrom(const FileTrailerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FileTrailerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTrailerProto::IsInitialized() const {
  return true;
}

void FileTrailerProto::Swap(FileTrailerProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileTrailerProto::InternalSwap(FileTrailerProto* other) {
  using std::swap;
  comparator_class_name_.Swap(&other->comparator_class_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encryption_key_.Swap(&other->encryption_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_info_offset_, other->file_info_offset_);
  swap(load_on_open_data_offset_, other->load_on_open_data_offset_);
  swap(uncompressed_data_index_size_, other->uncompressed_data_index_size_);
  swap(total_uncompressed_bytes_, other->total_uncompressed_bytes_);
  swap(data_index_count_, other->data_index_count_);
  swap(meta_index_count_, other->meta_index_count_);
  swap(entry_count_, other->entry_count_);
  swap(first_data_block_offset_, other->first_data_block_offset_);
  swap(last_data_block_offset_, other->last_data_block_offset_);
  swap(num_data_index_levels_, other->num_data_index_levels_);
  swap(compression_codec_, other->compression_codec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FileTrailerProto::GetMetadata() const {
  protobuf_HFile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HFile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace hbase
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hbase::pb::FileInfoProto* Arena::CreateMaybeMessage< ::hbase::pb::FileInfoProto >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FileInfoProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hbase::pb::FileTrailerProto* Arena::CreateMaybeMessage< ::hbase::pb::FileTrailerProto >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FileTrailerProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
